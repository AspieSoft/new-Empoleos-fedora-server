#!/bin/bash

dir="$1"

# install python, c++, and java
sudo dnf -y install python python3 python-pip python3-pip
sudo dnf -y install gcc-c++ make gcc
sudo dnf -y install java-1.8.0-openjdk
sudo dnf -y install java-11-openjdk
sudo dnf -y install java-latest-openjdk

# install nodejs
sudo dnf -y install nodejs
sudo npm -g i npm
npm config set prefix ~/.npm

# add npm to current user
if ! [ -f "$HOME/.zshrc" ]; then
  sudo touch "$HOME/.zshrc"
fi
if ! [ -f "$HOME/.profile" ]; then
  sudo touch "$HOME/.profile"
fi
if ! grep -q 'export N_PREFIX="~/.npm"' "$HOME/.zshrc" ; then
  echo 'export N_PREFIX="~/.npm"' | sudo tee -a "$HOME/.zshrc"
fi
if ! grep -q 'export N_PREFIX="~/.npm"' "$HOME/.profile" ; then
  echo 'export N_PREFIX="~/.npm"' | sudo tee -a "$HOME/.profile"
fi
if ! [ -d "$HOME/.npm" ]; then
  sudo mkdir $(whoami) "$HOME/.npm"
  sudo chown -R $(whoami) "$HOME/.npm"
fi

# add npm for new user
if ! [ -f "/etc/skel/.zshrc" ]; then
  sudo touch "/etc/skel/.zshrc"
fi
if ! [ -f "/etc/skel/.profile" ]; then
  sudo touch "/etc/skel/.profile"
fi
if ! grep -q 'export N_PREFIX="~/.npm"' "/etc/skel/.zshrc" ; then
  echo 'export N_PREFIX="~/.npm"' | sudo tee -a "/etc/skel/.zshrc"
fi
if ! grep -q 'export N_PREFIX="~/.npm"' "/etc/skel/.profile" ; then
  echo 'export N_PREFIX="~/.npm"' | sudo tee -a "/etc/skel/.profile"
fi

# install yarn and git
sudo npm -g i yarn
sudo dnf -y install git


# install zig
# sudo dnf -y install zig

# install golang
sudo dnf -y install golang
sudo ln -s /lib/golang /usr/share/go
sudo dnf -y install pcre-devel

# for gui window and graphics
sudo dnf -y install libX11-devel
libList="libX11-devel"
for lib in $(dnf search libX | grep "^libX" | sed -E 's/^([A-Za-z0-9_\-]*).*$/\1/m'); do
  # sudo dnf -y install "$lib"
  if ! [[ "$libList" =~ "$lib"$ ]]; then
    libList="$libList $lib"
  fi
done
sudo dnf -y install $libList
sudo dnf -y install mesa-libGLw GLC_lib-devel


if ! grep -q "go" "$HOME/.hidden" ; then
  echo "go" | sudo tee -a "$HOME/.hidden"
  # echo "zig" | sudo tee -a "$HOME/.hidden"
fi
if ! grep -q "go" "/etc/skel/.hidden" ; then
  echo "go" | sudo tee -a "/etc/skel/.hidden"
  # echo "zig" | sudo tee -a "/etc/skel/.hidden"
fi

# add gopath
if ! test -f "/etc/profile.d/golang.sh"; then
  sudo touch "/etc/profile.d/golang.sh"
fi
if ! test -d "/usr/lib/go" && test -d "/usr/lib/golang"; then
  sudo ln -s "/usr/lib/golang" "/usr/lib/go"
fi
echo 'export GOROOT=/usr/lib/go' | sudo tee -a "/etc/profile.d/golang.sh"
echo 'export GOPATH=$HOME/go' | sudo tee -a "/etc/profile.d/golang.sh"
echo 'export PATH=$PATH:$GOROOT/bin:$GOPATH/bin' | sudo tee -a "/etc/profile.d/golang.sh"
echo 'export GOFLAGS="-vet=off"' | sudo tee -a "/etc/profile.d/golang.sh" # prevent go from failing a test over basic warnings

# echo 'export CGO_ENABLED="0"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"

# echo 'export PATH="$PATH:$HOME/zig"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"
# echo 'export CGO_ENABLED="1"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"
# echo 'export CC="zig cc -target x86_64-linux"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"
# echo 'export CXX="zig c++ -target x86_64-linux"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"


# install docker
sudo dnf -y install dnf-plugins-core
sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl enable docker --now
