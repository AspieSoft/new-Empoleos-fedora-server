#!/bin/bash

dir="$1"

# install python, c++, and java
sudo apt -y install python python3 pip python3-pip
sudo apt -y install gcc g++ make
sudo apt -y install java-1.8.0-openjdk
sudo apt -y install java-11-openjdk
sudo apt -y install java-latest-openjdk

echo "installing java 8..."
sudo apt -y install openjdk-8-jdk openjdk-8-jre
echo "installing java 11..."
sudo apt -y install openjdk-11-jdk openjdk-11-jre

# install latest java version
echo "installing java latest..."
javaVer="99"
while true; do
  echo "trying java $javaVer"
  echo "" > java_log.tmp
  sudo apt -y install openjdk-$javaVer-jdk openjdk-$javaVer-jre &> java_log.tmp
  if [ "$(grep "^E: Unable to locate package" java_log.tmp)" = "" ]; then
    echo "successfully installed java $javaVer"
    break
  fi
  javaVer="$((javaVer - 1))"
  if [ "$javaVer" -lt "17" ]; then
    echo "failed to install java latest"
    break
  fi
done
rm -f java_log.tmp
unset javaVer

# install nodejs
sudo apt -y install curl dirmngr apt-transport-https lsb-release ca-certificates
sudo apt -y install nodejs

sudo apt -y install npm
sudo npm -g i npm
npm config set prefix ~/.npm

# add npm to current user
if ! [ -f "$HOME/.zshrc" ]; then
  sudo touch "$HOME/.zshrc"
fi
if ! [ -f "$HOME/.profile" ]; then
  sudo touch "$HOME/.profile"
fi
if ! grep -q 'export N_PREFIX="~/.npm"' "$HOME/.zshrc" ; then
  echo 'export N_PREFIX="~/.npm"' | sudo tee -a "$HOME/.zshrc"
fi
if ! grep -q 'export N_PREFIX="~/.npm"' "$HOME/.profile" ; then
  echo 'export N_PREFIX="~/.npm"' | sudo tee -a "$HOME/.profile"
fi
if ! [ -d "$HOME/.npm" ]; then
  sudo mkdir $(whoami) "$HOME/.npm"
  sudo chown -R $(whoami) "$HOME/.npm"
fi

# add npm for new user
if ! [ -f "/etc/skel/.zshrc" ]; then
  sudo touch "/etc/skel/.zshrc"
fi
if ! [ -f "/etc/skel/.profile" ]; then
  sudo touch "/etc/skel/.profile"
fi
if ! grep -q 'export N_PREFIX="~/.npm"' "/etc/skel/.zshrc" ; then
  echo 'export N_PREFIX="~/.npm"' | sudo tee -a "/etc/skel/.zshrc"
fi
if ! grep -q 'export N_PREFIX="~/.npm"' "/etc/skel/.profile" ; then
  echo 'export N_PREFIX="~/.npm"' | sudo tee -a "/etc/skel/.profile"
fi

# install yarn and git
sudo npm -g i yarn
sudo apt -y install git


# install zig
# sudo apt -y install zig

# install golang
sudo apt -y install golang
sudo ln -s /lib/golang /usr/share/go
sudo apt -y install libpcre3-dev

# for gui window and graphics
sudo apt -y install libx11-dev
libList="libx11-dev"
for lib in $(apt search libx11 | grep "^libx11" | sed -E 's/^([A-Za-z0-9_\-]*).*$/\1/m'); do
  # sudo apt -y install "$lib"
  if ! [[ "$libList" =~ "$lib"$ ]]; then
    libList="$libList $lib"
  fi
done
sudo apt -y install $libList
sudo apt -y install libglc-dev


if ! grep -q "go" "$HOME/.hidden" ; then
  echo "go" | sudo tee -a "$HOME/.hidden"
  # echo "zig" | sudo tee -a "$HOME/.hidden"
fi
if ! grep -q "go" "/etc/skel/.hidden" ; then
  echo "go" | sudo tee -a "/etc/skel/.hidden"
  # echo "zig" | sudo tee -a "/etc/skel/.hidden"
fi

# add gopath
if ! test -f "/etc/profile.d/golang.sh"; then
  sudo touch "/etc/profile.d/golang.sh"
fi
if ! test -d "/usr/lib/go" && test -d "/usr/lib/golang"; then
  sudo ln -s "/usr/lib/golang" "/usr/lib/go"
fi
echo 'export GOROOT=/usr/lib/go' | sudo tee -a "/etc/profile.d/golang.sh"
echo 'export GOPATH=$HOME/go' | sudo tee -a "/etc/profile.d/golang.sh"
echo 'export PATH=$PATH:$GOROOT/bin:$GOPATH/bin' | sudo tee -a "/etc/profile.d/golang.sh"
echo 'export GOFLAGS="-vet=off"' | sudo tee -a "/etc/profile.d/golang.sh" # prevent go from failing a test over basic warnings

# echo 'export CGO_ENABLED="0"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"

# echo 'export PATH="$PATH:$HOME/zig"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"
# echo 'export CGO_ENABLED="1"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"
# echo 'export CC="zig cc -target x86_64-linux"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"
# echo 'export CXX="zig c++ -target x86_64-linux"' | sudo tee -a "/etc/profile.d/golang.sh" # setting CGO_ENABLED to 0 fixes cross compatability issues with the binary file generated by "go build"


# install docker
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
sudo apt -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl enable docker --now
